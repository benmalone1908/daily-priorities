/**
 * DailyPrioritiesContent - Content for daily priorities tab
 */

import { useState } from 'react';
import { format } from 'date-fns';
import { DateRange } from 'react-day-picker';
import { Calendar, ChevronLeft, ChevronRight, History, Camera } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Calendar as CalendarPicker } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Separator } from '@/components/ui/separator';
import { useDailyPriorities, usePriorityDates } from '@/hooks/useDailyPriorities';
import { useAutoGeneratedPriorities } from '@/hooks/useAutoGeneratedPriorities';
import { useCampaignRenewals } from '@/hooks/useCampaignRenewals';
import { useRoasIgnores } from '@/hooks/useRoasIgnores';
import { SECTION_ORDER, RenewalStatus, IgnoreReason } from '@/types/daily-priorities';
import PrioritySection from '@/components/daily-priorities/PrioritySection';
import AutoGeneratedSection from '@/components/daily-priorities/AutoGeneratedSection';
import ChangelogModal from '@/components/daily-priorities/ChangelogModal';
import AnnouncementBanner from '@/components/daily-priorities/AnnouncementBanner';
import ResourcesSection from '@/components/daily-priorities/ResourcesSection';
import { IgnoreReasonModal } from '@/components/daily-priorities/IgnoreReasonModal';
import type { CampaignDataRow } from '@/types/campaign';

interface DailyPrioritiesContentProps {
  dateRange?: DateRange;
  campaignData: CampaignDataRow[];
  screenshotMode?: boolean;
  onScreenshotModeChange?: (enabled: boolean) => void;
  lastCampaignUpload?: Date | null;
  lastContractUpload?: Date | null;
  isLoadingCampaignData?: boolean;
}

export default function DailyPrioritiesContent({
  dateRange,
  campaignData,
  screenshotMode = false,
  onScreenshotModeChange,
  lastCampaignUpload,
  lastContractUpload,
  isLoadingCampaignData = false
}: DailyPrioritiesContentProps) {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [isChangelogOpen, setIsChangelogOpen] = useState(false);
  const [showIgnoredCampaigns, setShowIgnoredCampaigns] = useState(false);
  const [ignoreModalOpen, setIgnoreModalOpen] = useState(false);
  const [campaignToIgnore, setCampaignToIgnore] = useState<string>('');
  const dateString = format(selectedDate, 'yyyy-MM-dd');
  const displayDate = format(selectedDate, 'EEEE, MMMM d, yyyy');

  const {
    priorities,
    isLoading,
    addPriority,
    updatePriority,
    deletePriority,
    reorderPriorities
  } = useDailyPriorities(dateString);

  const autoSections = useAutoGeneratedPriorities(selectedDate, campaignData);
  const { data: priorityDates = [] } = usePriorityDates();
  const { updateRenewalStatus } = useCampaignRenewals();
  const { addIgnore, removeIgnore, isIgnored, getIgnoreReason, ignoredCampaigns } = useRoasIgnores();

  const handleRenewalStatusUpdate = (campaignName: string, newStatus: RenewalStatus) => {
    updateRenewalStatus({ campaignName, newStatus });
  };

  const handleRoasIgnoreToggle = (campaignName: string, isCurrentlyIgnored: boolean) => {
    if (isCurrentlyIgnored) {
      // Un-ignore: directly remove
      removeIgnore(campaignName);
    } else {
      // Ignore: show modal to select reason
      setCampaignToIgnore(campaignName);
      setIgnoreModalOpen(true);
    }
  };

  const handleIgnoreReasonConfirm = (reason: IgnoreReason) => {
    addIgnore(campaignToIgnore, reason);
    setCampaignToIgnore('');
  };

  // Filter and add isIgnored flag to ROAS priorities
  // When showIgnoredCampaigns is true, ONLY show ignored campaigns from the database
  // When false, show only non-ignored campaigns from auto-generated alerts
  const roasPrioritiesWithIgnoreFlag = showIgnoredCampaigns
    ? ignoredCampaigns.map(ignore => {
        // Find this campaign in the auto-generated list to get days left
        const autoGenerated = autoSections.roas.find(p => p.client_name === ignore.campaign_order_name);

        return {
          client_name: ignore.campaign_order_name,
          description: `Ignored: ${ignore.ignore_reason}`,
          metric: '-',
          severity: 'low' as const,
          isIgnored: true,
          ignoreReason: ignore.ignore_reason,
          daysLeft: autoGenerated?.daysLeft || 0
        };
      })
    : autoSections.roas
        .filter(priority => !isIgnored(priority.client_name))
        .map(priority => ({
          ...priority,
          isIgnored: false,
          ignoreReason: undefined
        }));

  const handlePreviousDay = () => {
    const prev = new Date(selectedDate);
    prev.setDate(prev.getDate() - 1);
    setSelectedDate(prev);
  };

  const handleNextDay = () => {
    const next = new Date(selectedDate);
    next.setDate(next.getDate() + 1);
    setSelectedDate(next);
  };

  const handleToday = () => {
    setSelectedDate(new Date());
  };

  // Check if selected date is today
  const isToday = format(selectedDate, 'yyyy-MM-dd') === format(new Date(), 'yyyy-MM-dd');

  // Group priorities by section
  const prioritiesBySection = SECTION_ORDER.reduce((acc, section) => {
    acc[section] = priorities.filter(p => p.section === section);
    return acc;
  }, {} as Record<string, typeof priorities>);

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">Daily Priorities</h2>
          <p className="text-muted-foreground mt-1">
            Manage team priorities and track campaign alerts
          </p>
        </div>
        <div className="flex items-center gap-4">
          {/* Last Data Update */}
          {(lastCampaignUpload || lastContractUpload) && (
            <div className="text-xs text-muted-foreground text-right">
              <div className="font-medium mb-1">Last Data Update:</div>
              {lastCampaignUpload && (
                <div>
                  Campaigns: {new Date(lastCampaignUpload).toLocaleString('en-US', {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric',
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                  })}
                </div>
              )}
              {lastContractUpload && (
                <div>
                  Contract Terms: {new Date(lastContractUpload).toLocaleString('en-US', {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric',
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                  })}
                </div>
              )}
            </div>
          )}

          {/* HIDDEN: Screenshot Mode button - uncomment if needed */}
          {/* <Button
            variant={screenshotMode ? "default" : "outline"}
            onClick={() => onScreenshotModeChange?.(!screenshotMode)}
            className="gap-2"
          >
            <Camera className="h-4 w-4" />
            {screenshotMode ? "Exit Screenshot Mode" : "Screenshot Mode"}
          </Button> */}

          <Button
            variant="outline"
            onClick={() => setIsChangelogOpen(true)}
            className="gap-2"
          >
            <History className="h-4 w-4" />
            View Changelog
          </Button>
        </div>
      </div>

      {/* Announcements and Resources side by side */}
      <div className="grid grid-cols-2 gap-4">
        <AnnouncementBanner />
        <ResourcesSection />
      </div>

      {/* Date Navigation */}
      <div className="flex items-center justify-end gap-3">
        <div className="text-xs text-muted-foreground">
          {isLoading ? 'Loading...' : `${priorities.length} tasks`}
        </div>

        {!isToday && (
          <Button variant="outline" size="sm" onClick={handleToday} className="h-7 text-xs">
            Back to Today
          </Button>
        )}

        <div className="flex items-center gap-1">
          <Button
            variant="ghost"
            size="icon"
            onClick={handlePreviousDay}
            className="h-7 w-7"
          >
            <ChevronLeft className="h-3.5 w-3.5" />
          </Button>

          <Popover>
            <PopoverTrigger asChild>
              <Button variant="ghost" className="gap-1.5 h-7 text-xs font-normal">
                <Calendar className="h-3 w-3" />
                {displayDate}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="end">
              <CalendarPicker
                mode="single"
                selected={selectedDate}
                onSelect={(date) => date && setSelectedDate(date)}
                initialFocus
                modifiers={{
                  hasPriorities: (date) =>
                    priorityDates.includes(format(date, 'yyyy-MM-dd'))
                }}
                modifiersStyles={{
                  hasPriorities: {
                    fontWeight: 'bold',
                    textDecoration: 'underline'
                  }
                }}
              />
            </PopoverContent>
          </Popover>

          <Button
            variant="ghost"
            size="icon"
            onClick={handleNextDay}
            className="h-7 w-7"
          >
            <ChevronRight className="h-3.5 w-3.5" />
          </Button>
        </div>
      </div>

      {/* Manual Task Sections */}
      <div className="space-y-6">
        <div>
          <h3 className="text-xl font-semibold mb-4">Team Priorities</h3>
          {SECTION_ORDER.map((section) => (
            <PrioritySection
              key={section}
              section={section}
              priorities={prioritiesBySection[section] || []}
              date={dateString}
              onAddPriority={addPriority}
              onUpdatePriority={updatePriority}
              onDeletePriority={deletePriority}
              onReorderPriorities={reorderPriorities}
            />
          ))}
        </div>

        <Separator className="my-8" />

        {/* Auto-Generated Sections */}
        <div>
          <h3 className="text-xl font-semibold mb-4">Campaign Alerts</h3>
          <p className="text-sm text-muted-foreground mb-4">
            Auto-generated from campaign data. Updates when new data is uploaded.
          </p>

          <AutoGeneratedSection
            title="Upcoming Renewals"
            description="Campaigns ending in the next 15 days"
            priorities={autoSections.renewals}
            emptyMessage="No campaigns ending soon"
            detailsColumnLabel="End Date"
            metricColumnLabel="Days Left"
            showRenewalStatus={true}
            onStatusUpdate={handleRenewalStatusUpdate}
            hideAutoGeneratedLabel={true}
          />

          <AutoGeneratedSection
            title="Pacing Alerts"
            titleSuffix="Campaigns pacing below 95% or above 105%"
            description="Note: Yesterday's data refers to 2 days ago."
            priorities={autoSections.pacing}
            emptyMessage="All campaigns pacing normally"
            showPacingColumns={true}
            hideAutoGeneratedLabel={true}
            isLoadingCampaignData={isLoadingCampaignData}
          />

          <AutoGeneratedSection
            title="ROAS Alerts"
            description="Campaigns with Return on Ad Spend below 2.0"
            priorities={roasPrioritiesWithIgnoreFlag}
            emptyMessage="All campaigns meeting ROAS targets"
            showDaysLeftColumn={true}
            metricColumnLabel="ROAS"
            hideAutoGeneratedLabel={true}
            showIgnoreToggle={true}
            onIgnoreToggle={handleRoasIgnoreToggle}
            showIgnoredToggle={true}
            showIgnored={showIgnoredCampaigns}
            onShowIgnoredChange={setShowIgnoredCampaigns}
            isLoadingCampaignData={isLoadingCampaignData}
          />
        </div>
      </div>

      {/* Ignore Reason Modal */}
      <IgnoreReasonModal
        open={ignoreModalOpen}
        onOpenChange={setIgnoreModalOpen}
        campaignName={campaignToIgnore}
        onConfirm={handleIgnoreReasonConfirm}
      />

      {/* Changelog Modal */}
      <ChangelogModal
        isOpen={isChangelogOpen}
        onClose={() => setIsChangelogOpen(false)}
      />
    </div>
  );
}
