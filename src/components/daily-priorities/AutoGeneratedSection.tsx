/**
 * AutoGeneratedSection - Displays auto-populated priorities from campaign data
 */

import { useState, useMemo } from 'react';
import { AutoGeneratedPriority } from '@/types/daily-priorities';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { TableCell } from '@/components/ui/table';
import { AlertCircle, AlertTriangle, Info, ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';

interface AutoGeneratedSectionProps {
  title: string;
  titleSuffix?: string;
  description?: string;
  priorities: AutoGeneratedPriority[];
  emptyMessage?: string;
  detailsColumnLabel?: string;
  metricColumnLabel?: string;
  showPacingColumns?: boolean;
  showDaysLeftColumn?: boolean;
  hideAutoGeneratedLabel?: boolean;
}

const severityIcons = {
  high: <AlertCircle className="h-4 w-4 text-red-500" />,
  medium: <AlertTriangle className="h-4 w-4 text-yellow-500" />,
  low: <Info className="h-4 w-4 text-blue-500" />
};

const severityColors = {
  high: 'bg-red-50 border-red-200',
  medium: 'bg-yellow-50 border-yellow-200',
  low: 'bg-blue-50 border-blue-200'
};

type SortField = 'daysLeft' | 'overallPacing' | 'metric' | null;
type SortDirection = 'asc' | 'desc';

export default function AutoGeneratedSection({
  title,
  titleSuffix,
  description,
  priorities,
  emptyMessage = 'No items to display',
  detailsColumnLabel = 'Details',
  metricColumnLabel = 'Metric',
  showPacingColumns = false,
  showDaysLeftColumn = false,
  hideAutoGeneratedLabel = false
}: AutoGeneratedSectionProps) {
  const [sortField, setSortField] = useState<SortField>(null);
  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');
  const [showEndingSoonOnly, setShowEndingSoonOnly] = useState(false);

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      // Toggle direction
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      // New field, default to ascending
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const filteredPriorities = useMemo(() => {
    if (!showEndingSoonOnly) return priorities;

    // Filter to only show campaigns ending in less than 15 days
    return priorities.filter(p => (p.daysLeft || 0) > 0 && (p.daysLeft || 0) < 15);
  }, [priorities, showEndingSoonOnly]);

  const sortedPriorities = useMemo(() => {
    if (!sortField) return filteredPriorities;

    return [...filteredPriorities].sort((a, b) => {
      let aValue: number = 0;
      let bValue: number = 0;

      if (sortField === 'daysLeft') {
        aValue = a.daysLeft || 0;
        bValue = b.daysLeft || 0;
      } else if (sortField === 'overallPacing') {
        aValue = a.overallPacing || 0;
        bValue = b.overallPacing || 0;
      } else if (sortField === 'metric') {
        aValue = typeof a.metric === 'number' ? a.metric : parseFloat(String(a.metric)) || 0;
        bValue = typeof b.metric === 'number' ? b.metric : parseFloat(String(b.metric)) || 0;
      }

      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;
    });
  }, [filteredPriorities, sortField, sortDirection]);

  const SortButton = ({ field, children }: { field: SortField; children: React.ReactNode }) => {
    const isActive = sortField === field;
    return (
      <Button
        variant="ghost"
        size="sm"
        className="h-8 px-2 font-semibold hover:bg-muted/50"
        onClick={() => handleSort(field)}
      >
        {children}
        {isActive ? (
          sortDirection === 'asc' ? (
            <ArrowUp className="ml-2 h-4 w-4" />
          ) : (
            <ArrowDown className="ml-2 h-4 w-4" />
          )
        ) : (
          <ArrowUpDown className="ml-2 h-4 w-4 opacity-50" />
        )}
      </Button>
    );
  };

  return (
    <Card className="mb-6">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-lg flex items-center gap-2">
              {title}
              <span className="text-sm font-normal text-muted-foreground">
                ({sortedPriorities.length}{showEndingSoonOnly && ` of ${priorities.length}`})
                {titleSuffix && ` - ${titleSuffix}`}
              </span>
            </CardTitle>
            {description && (
              <p className="text-xs text-muted-foreground mt-1">{description}</p>
            )}
          </div>
          <div className="flex items-center gap-4">
            {(showPacingColumns || showDaysLeftColumn) && (
              <div className="flex items-center gap-2">
                <Switch
                  id={`ending-soon-${title}`}
                  checked={showEndingSoonOnly}
                  onCheckedChange={setShowEndingSoonOnly}
                />
                <Label htmlFor={`ending-soon-${title}`} className="text-sm cursor-pointer">
                  Ending in &lt;15 days
                </Label>
              </div>
            )}
            {!hideAutoGeneratedLabel && (
              <div className="text-xs text-muted-foreground">
                Auto-generated
              </div>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {priorities.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <p>{emptyMessage}</p>
          </div>
        ) : (
          <div className="border rounded-lg max-h-[600px] overflow-y-auto">
            <table className="w-full caption-bottom text-sm">
              <thead>
                <tr className="border-b sticky top-0 bg-white dark:bg-slate-950 z-10 shadow-sm">
                  <th className="h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] w-12 bg-white dark:bg-slate-950"></th>
                  <th className="h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] bg-white dark:bg-slate-950">Campaign</th>
                  {!showPacingColumns && !showDaysLeftColumn && (
                    <th className="h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] max-w-lg bg-white dark:bg-slate-950">{detailsColumnLabel}</th>
                  )}
                  {showPacingColumns && (
                    <>
                      <th className="h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] w-32 text-right bg-white dark:bg-slate-950">
                        <div className="flex justify-end">
                          <SortButton field="daysLeft">Days Left</SortButton>
                        </div>
                      </th>
                      <th className="h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] w-32 text-right bg-white dark:bg-slate-950">
                        <div className="flex justify-end">
                          <SortButton field="overallPacing">Overall Pacing</SortButton>
                        </div>
                      </th>
                      <th className="h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] w-32 text-right bg-white dark:bg-slate-950">Yesterday's Ratio</th>
                    </>
                  )}
                  {showDaysLeftColumn && !showPacingColumns && (
                    <th className="h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] w-32 text-right bg-white dark:bg-slate-950">
                      <div className="flex justify-end">
                        <SortButton field="daysLeft">Days Left</SortButton>
                      </div>
                    </th>
                  )}
                  {!showPacingColumns && (
                    <th className="h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] w-40 text-right whitespace-nowrap bg-white dark:bg-slate-950">
                      <div className="flex justify-end">
                        <SortButton field="metric">{metricColumnLabel}</SortButton>
                      </div>
                    </th>
                  )}
                </tr>
              </thead>
              <tbody>
                {sortedPriorities.map((priority, idx) => (
                  <tr
                    key={idx}
                    className={cn(
                      'border-b transition-colors hover:bg-muted/50',
                      priority.severity && severityColors[priority.severity]
                    )}
                  >
                    <td className="p-4 align-middle [&:has([role=checkbox])]:pr-0 p-2">
                      {priority.severity && severityIcons[priority.severity]}
                    </td>
                    <td className="p-4 align-middle [&:has([role=checkbox])]:pr-0 font-medium">
                      {priority.client_name}
                    </td>
                    {!showPacingColumns && !showDaysLeftColumn && (
                      <td className="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-sm">
                        {priority.description}
                      </td>
                    )}
                    {showPacingColumns && (
                      <>
                        <td className="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-right font-mono text-sm">
                          {priority.daysLeft}
                        </td>
                        <td className="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-right font-mono text-sm">
                          {((priority.overallPacing || 0) * 100).toFixed(1)}%
                        </td>
                        <td className="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-right font-mono text-sm">
                          {((priority.yesterdayRatio || 0) * 100).toFixed(1)}%
                        </td>
                      </>
                    )}
                    {showDaysLeftColumn && !showPacingColumns && (
                      <td className="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-right font-mono text-sm">
                        {priority.daysLeft}
                      </td>
                    )}
                    {!showPacingColumns && (
                      <td className="p-4 align-middle [&:has([role=checkbox])]:pr-0 text-right font-mono text-sm">
                        {priority.metric}
                      </td>
                    )}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
