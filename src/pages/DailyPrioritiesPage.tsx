/**
 * DailyPrioritiesPage - Main page for managing daily team priorities
 */

import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { Calendar, ChevronLeft, ChevronRight } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Calendar as CalendarPicker } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Separator } from '@/components/ui/separator';
import { useDailyPriorities, usePriorityDates } from '@/hooks/useDailyPriorities';
import { useAutoGeneratedPriorities } from '@/hooks/useAutoGeneratedPriorities';
import { SECTION_ORDER } from '@/types/daily-priorities';
import PrioritySection from '@/components/daily-priorities/PrioritySection';
import AutoGeneratedSection from '@/components/daily-priorities/AutoGeneratedSection';
import SidebarLayout from '@/components/SidebarLayout';

export default function DailyPrioritiesPage() {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const dateString = format(selectedDate, 'yyyy-MM-dd');
  const displayDate = format(selectedDate, 'EEEE, MMMM d, yyyy');

  const {
    priorities,
    isLoading,
    addPriority,
    updatePriority,
    deletePriority,
    reorderPriorities
  } = useDailyPriorities(dateString);

  const autoSections = useAutoGeneratedPriorities(selectedDate);
  const { data: priorityDates = [] } = usePriorityDates();

  const handlePreviousDay = () => {
    const prev = new Date(selectedDate);
    prev.setDate(prev.getDate() - 1);
    setSelectedDate(prev);
  };

  const handleNextDay = () => {
    const next = new Date(selectedDate);
    next.setDate(next.getDate() + 1);
    setSelectedDate(next);
  };

  const handleToday = () => {
    setSelectedDate(new Date());
  };

  // Group priorities by section
  const prioritiesBySection = SECTION_ORDER.reduce((acc, section) => {
    acc[section] = priorities.filter(p => p.section === section);
    return acc;
  }, {} as Record<string, typeof priorities>);

  return (
    <SidebarLayout>
      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Daily Priorities</h1>
            <p className="text-muted-foreground mt-1">
              Manage team priorities and track campaign alerts
            </p>
          </div>
        </div>

        {/* Date Navigation */}
        <div className="flex items-center gap-4 bg-card p-4 rounded-lg border">
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="icon"
              onClick={handlePreviousDay}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>

            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="gap-2 min-w-[240px]">
                  <Calendar className="h-4 w-4" />
                  {displayDate}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <CalendarPicker
                  mode="single"
                  selected={selectedDate}
                  onSelect={(date) => date && setSelectedDate(date)}
                  initialFocus
                  modifiers={{
                    hasPriorities: (date) =>
                      priorityDates.includes(format(date, 'yyyy-MM-dd'))
                  }}
                  modifiersStyles={{
                    hasPriorities: {
                      fontWeight: 'bold',
                      textDecoration: 'underline'
                    }
                  }}
                />
              </PopoverContent>
            </Popover>

            <Button
              variant="outline"
              size="icon"
              onClick={handleNextDay}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>

          <Button variant="default" onClick={handleToday}>
            Today
          </Button>

          <div className="ml-auto text-sm text-muted-foreground">
            {isLoading ? 'Loading...' : `${priorities.length} tasks`}
          </div>
        </div>

        {/* Manual Task Sections */}
        <div className="space-y-6">
          <div>
            <h2 className="text-xl font-semibold mb-4">Team Priorities</h2>
            {SECTION_ORDER.map((section) => (
              <PrioritySection
                key={section}
                section={section}
                priorities={prioritiesBySection[section] || []}
                date={dateString}
                onAddPriority={addPriority}
                onUpdatePriority={updatePriority}
                onDeletePriority={deletePriority}
                onReorderPriorities={reorderPriorities}
              />
            ))}
          </div>

          <Separator className="my-8" />

          {/* Auto-Generated Sections */}
          <div>
            <h2 className="text-xl font-semibold mb-4">Campaign Alerts</h2>
            <p className="text-sm text-muted-foreground mb-4">
              Auto-generated from campaign data. Updates when new data is uploaded.
            </p>

            <AutoGeneratedSection
              title="Upcoming Renewals"
              description="Campaigns ending in the next 14 days"
              priorities={autoSections.renewals}
              emptyMessage="No campaigns ending soon"
            />

            <AutoGeneratedSection
              title="Pacing Issues"
              description="Campaigns under 85% of target delivery"
              priorities={autoSections.pacing}
              emptyMessage="All campaigns pacing normally"
            />

            <AutoGeneratedSection
              title="ROAS Alerts"
              description="Campaigns with Return on Ad Spend below 2.0"
              priorities={autoSections.roas}
              emptyMessage="All campaigns meeting ROAS targets"
            />
          </div>
        </div>
      </div>
    </SidebarLayout>
  );
}
